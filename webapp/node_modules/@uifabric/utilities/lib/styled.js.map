{"version":3,"file":"styled.js","sourceRoot":"../src/","sources":["styled.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { flatten } from './array';\nimport { concatStyleSets, IStyleSet, IStyleFunctionOrObject, IConcatenatedStyleSet } from '@uifabric/merge-styles';\nimport { Customizations } from './customizations/Customizations';\nimport { CustomizerContext, ICustomizerContext } from './customizations/CustomizerContext';\n\nexport interface IPropsWithStyles<TStyleProps, TStyleSet extends IStyleSet<TStyleSet>> {\n  styles?: IStyleFunctionOrObject<TStyleProps, TStyleSet>;\n}\n\nexport interface ICustomizableProps {\n  /**\n   * Name of scope, which can be targeted using the Customizer.\n   */\n  scope: string;\n\n  /**\n   * List of fields which can be customized.\n   * @defaultvalue [ 'theme', 'styles' ]\n   */\n  fields?: string[];\n}\n\nconst DefaultFields = ['theme', 'styles'];\n\n/**\n * The styled HOC wrapper allows you to create a functional wrapper around a given component which will resolve\n * getStyles functional props, and mix customized props passed in using concatStyleSets.\n *\n * @example\n * ```tsx\n * export const Toggle = styled(\n *   ToggleBase,\n *   props => ({ root: { background: 'red' }})\n * );\n * ```\n * @param Component - The unstyled base component to render, which receives styles.\n * @param baseStyles - The styles which should be curried with the component.\n * @param getProps - A helper which provides default props.\n * @param customizable - An object which defines which props can be customized using the Customizer.\n * @param pure - A boolean indicating if the component should avoid re-rendering when props haven't changed.\n * Note that pure should not be used on components which allow children, or take in complex objects or\n * arrays as props which could mutate on every render.\n */\nexport function styled<\n  TComponentProps extends IPropsWithStyles<TStyleProps, TStyleSet>,\n  TStyleProps,\n  TStyleSet extends IStyleSet<TStyleSet>\n>(\n  Component: React.ComponentClass<TComponentProps> | React.StatelessComponent<TComponentProps>,\n  baseStyles: IStyleFunctionOrObject<TStyleProps, TStyleSet>,\n  getProps?: (props: TComponentProps) => Partial<TComponentProps>,\n  customizable?: ICustomizableProps,\n  pure?: boolean\n): React.StatelessComponent<TComponentProps> {\n  customizable = customizable || { scope: '', fields: undefined };\n\n  const { scope, fields = DefaultFields } = customizable;\n  const ParentComponent = pure ? React.PureComponent : React.Component;\n\n  class Wrapped extends ParentComponent<TComponentProps, {}> {\n    // Function.prototype.name is an ES6 feature, so the cast to any is required until we're\n    // able to drop IE 11 support and compile with ES6 libs\n    // tslint:disable-next-line:no-any\n    public static displayName = `Styled${Component.displayName || (Component as any).name}`;\n\n    private _inCustomizerContext = false;\n    private _customizedStyles?: IStyleFunctionOrObject<TStyleProps, TStyleSet>;\n    private _styles: (IStyleFunctionOrObject<TStyleProps, TStyleSet> | undefined)[];\n\n    public render(): JSX.Element {\n      return <CustomizerContext.Consumer>{this._renderContent}</CustomizerContext.Consumer>;\n    }\n\n    public componentDidMount(): void {\n      if (!this._inCustomizerContext) {\n        Customizations.observe(this._onSettingsChanged);\n      }\n    }\n\n    public componentWillUnmount(): void {\n      if (!this._inCustomizerContext) {\n        Customizations.unobserve(this._onSettingsChanged);\n      }\n    }\n\n    private _renderContent = (context: ICustomizerContext): JSX.Element => {\n      this._inCustomizerContext = !!context.customizations.inCustomizerContext;\n\n      const settings = Customizations.getSettings(fields, scope, context.customizations);\n      const { styles: customizedStyles, dir, ...rest } = settings;\n      const additionalProps = getProps ? getProps(this.props) : undefined;\n\n      this._updateStyles(customizedStyles);\n\n      return <Component {...rest} {...additionalProps} {...this.props} styles={this._styles} />;\n    };\n\n    private _updateStyles(customizedStyles: IStyleFunctionOrObject<TStyleProps, TStyleSet>): void {\n      if (!this._styles || customizedStyles !== this._styles[1] || !!this.props.styles) {\n        // Using styled components as the Component arg will result in nested styling arrays.\n        // Use flatten to ensure that the _styles array remains flat when styled components are wrapped.\n        this._styles = flatten([baseStyles, customizedStyles, this.props.styles]);\n      }\n    }\n\n    private _onSettingsChanged = (): void => this.forceUpdate();\n  }\n\n  // This preserves backwards compatibility.\n  // tslint:disable-next-line:no-any\n  return Wrapped as any;\n}\n"]}