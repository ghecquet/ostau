{"ast":null,"code":"import PahoMQTT from 'paho-mqtt';\nimport MQTTPattern from 'mqtt-pattern';\nimport { onOff, temperatureSetting } from './actions';\n\nconst reduxMqttMiddleware = config => ({\n  dispatch\n}) => {\n  const client = new PahoMQTT.Client(config.host, config.port, config.clientId || \"\");\n  const statusPattern = 'stat/+id/+cmd';\n  const sensorPattern = 'tele/+id/SENSOR';\n  client.connect({\n    onSuccess: () => {\n      client.subscribe(MQTTPattern.clean(statusPattern));\n      client.subscribe(MQTTPattern.clean(sensorPattern));\n    }\n  });\n\n  client.onMessageArrived = message => {\n    const statusParams = MQTTPattern.exec(statusPattern, message.topic);\n\n    if (statusParams) {}\n\n    const sensorParams = MQTTPattern.exec(sensorPattern, message.topic);\n\n    if (sensorParams) {\n      const value = JSON.parse(message.payloadString);\n      console.log(value);\n      dispatch(temperatureSetting({\n        id: sensorParams.id,\n        temperature: value.SI7021.Temperature,\n        humidity: value.SI7021.Humidity\n      }));\n    }\n  }; //   client.on('message', ((topic, message) => {\n  //     const msgObj = JSON.parse(message);\n  //     if (topic === 'unregister') {\n  //       client.unsubscribe(msgObj.deviceId);\n  //       dispatch(removeDevice(msgObj));\n  //     } else if (topic === 'registrations') {\n  //       client.subscribe(msgObj.deviceId);\n  //       dispatch(addDevice(msgObj));\n  //     } else {\n  //       console.log('message:', msgObj);\n  //       dispatch(onData(msgObj));\n  //     }\n  //   }));\n\n\n  return next => action => {\n    console.log('nextaction', action);\n    next(action);\n  };\n};\n\nexport default reduxMqttMiddleware;","map":{"version":3,"sources":["/Users/ghecquet/work/src/github.com/ghecquet/ostau/src/tasmota/index.js"],"names":["PahoMQTT","MQTTPattern","onOff","temperatureSetting","reduxMqttMiddleware","config","dispatch","client","Client","host","port","clientId","statusPattern","sensorPattern","connect","onSuccess","subscribe","clean","onMessageArrived","message","statusParams","exec","topic","sensorParams","value","JSON","parse","payloadString","console","log","id","temperature","SI7021","Temperature","humidity","Humidity","next","action"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AAEA,SAASC,KAAT,EAAgBC,kBAAhB,QAA0C,WAA1C;;AAEA,MAAMC,mBAAmB,GAAGC,MAAM,IAAI,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACpD,QAAMC,MAAM,GAAG,IAAIP,QAAQ,CAACQ,MAAb,CAAoBH,MAAM,CAACI,IAA3B,EAAiCJ,MAAM,CAACK,IAAxC,EAA8CL,MAAM,CAACM,QAAP,IAAmB,EAAjE,CAAf;AAEA,QAAMC,aAAa,GAAG,eAAtB;AACA,QAAMC,aAAa,GAAG,iBAAtB;AAEAN,EAAAA,MAAM,CAACO,OAAP,CAAe;AAACC,IAAAA,SAAS,EAAE,MAAM;AAC7BR,MAAAA,MAAM,CAACS,SAAP,CAAiBf,WAAW,CAACgB,KAAZ,CAAkBL,aAAlB,CAAjB;AACAL,MAAAA,MAAM,CAACS,SAAP,CAAiBf,WAAW,CAACgB,KAAZ,CAAkBJ,aAAlB,CAAjB;AACH;AAHc,GAAf;;AAKAN,EAAAA,MAAM,CAACW,gBAAP,GAA4BC,OAAD,IAAa;AACpC,UAAMC,YAAY,GAAGnB,WAAW,CAACoB,IAAZ,CAAiBT,aAAjB,EAAgCO,OAAO,CAACG,KAAxC,CAArB;;AACA,QAAIF,YAAJ,EAAkB,CAEjB;;AAED,UAAMG,YAAY,GAAGtB,WAAW,CAACoB,IAAZ,CAAiBR,aAAjB,EAAgCM,OAAO,CAACG,KAAxC,CAArB;;AACA,QAAIC,YAAJ,EAAkB;AACd,YAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWP,OAAO,CAACQ,aAAnB,CAAd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AAEAlB,MAAAA,QAAQ,CAACH,kBAAkB,CAAC;AACxB2B,QAAAA,EAAE,EAAEP,YAAY,CAACO,EADO;AAExBC,QAAAA,WAAW,EAAEP,KAAK,CAACQ,MAAN,CAAaC,WAFF;AAGxBC,QAAAA,QAAQ,EAAEV,KAAK,CAACQ,MAAN,CAAaG;AAHC,OAAD,CAAnB,CAAR;AAKH;AACJ,GAjBD,CAXoD,CA8BxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEI,SAAOC,IAAI,IAAKC,MAAD,IAAY;AACvBT,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BQ,MAA1B;AACAD,IAAAA,IAAI,CAACC,MAAD,CAAJ;AACH,GAHD;AAIH,CAhDD;;AAkDA,eAAejC,mBAAf","sourcesContent":["import PahoMQTT from 'paho-mqtt'\nimport MQTTPattern from 'mqtt-pattern'\n\nimport { onOff, temperatureSetting } from './actions';\n\nconst reduxMqttMiddleware = config => ({ dispatch }) => {\n    const client = new PahoMQTT.Client(config.host, config.port, config.clientId ||Â \"\");\n\n    const statusPattern = 'stat/+id/+cmd'\n    const sensorPattern = 'tele/+id/SENSOR'\n\n    client.connect({onSuccess: () => {\n        client.subscribe(MQTTPattern.clean(statusPattern));\n        client.subscribe(MQTTPattern.clean(sensorPattern));\n    }})\n\n    client.onMessageArrived = ((message) => {\n        const statusParams = MQTTPattern.exec(statusPattern, message.topic)\n        if (statusParams) {\n\n        }\n\n        const sensorParams = MQTTPattern.exec(sensorPattern, message.topic)\n        if (sensorParams) {\n            const value = JSON.parse(message.payloadString);\n            console.log(value)\n\n            dispatch(temperatureSetting({\n                id: sensorParams.id,\n                temperature: value.SI7021.Temperature,\n                humidity: value.SI7021.Humidity\n            }))\n        }\n    })\n\n//   client.on('message', ((topic, message) => {\n//     const msgObj = JSON.parse(message);\n//     if (topic === 'unregister') {\n//       client.unsubscribe(msgObj.deviceId);\n//       dispatch(removeDevice(msgObj));\n//     } else if (topic === 'registrations') {\n//       client.subscribe(msgObj.deviceId);\n//       dispatch(addDevice(msgObj));\n//     } else {\n//       console.log('message:', msgObj);\n//       dispatch(onData(msgObj));\n//     }\n//   }));\n\n    return next => (action) => {\n        console.log('nextaction', action);\n        next(action);\n    };\n};\n\nexport default reduxMqttMiddleware;"]},"metadata":{},"sourceType":"module"}