{"ast":null,"code":"'use strict';\n\nconst React = require('react');\n\nclass Thermostat extends React.Component {\n  getStyles() {\n    // Determine if the thermostat is actively working to reach the target temperature.\n    let dialColor = '#222';\n\n    if (this.props.hvacMode === 'heating') {\n      dialColor = '#E36304';\n    } else if (this.props.hvacMode === 'cooling') {\n      dialColor = '#007AF1';\n    }\n\n    return {\n      dial: {\n        WebkitUserSelect: 'none',\n        MozUserSelect: 'none',\n        msUserSelect: 'none',\n        userSelect: 'none'\n      },\n      circle: {\n        fill: dialColor,\n        WebkitTransition: 'fill 0.5s',\n        transition: 'fill 0.5s'\n      },\n      target: {\n        fill: 'white',\n        textAnchor: 'middle',\n        fontFamily: 'Helvetica, sans-serif',\n        alignmentBaseline: 'central',\n        fontSize: '120px',\n        fontWeight: 'bold',\n        visibility: this.props.away ? 'hidden' : 'visible'\n      },\n      ambient: {\n        fill: 'white',\n        textAnchor: 'middle',\n        fontFamily: 'Helvetica, sans-serif',\n        alignmentBaseline: 'central',\n        fontSize: '22px',\n        fontWeight: 'bold'\n      },\n      away: {\n        fill: 'white',\n        textAnchor: 'middle',\n        fontFamily: 'Helvetica, sans-serif',\n        alignmentBaseline: 'central',\n        fontSize: '72px',\n        fontWeight: 'bold',\n        opacity: this.props.away ? '1' : '0',\n        pointerEvents: 'none'\n      },\n      leaf: {\n        fill: '#13EB13',\n        opacity: this.props.leaf ? '1' : '0',\n        visibility: this.props.away ? 'hidden' : 'visible',\n        WebkitTransition: 'opacity 0.5s',\n        transition: 'opacity 0.5s',\n        pointerEvents: 'none'\n      }\n    };\n  }\n\n  pointsToPath(points) {\n    return [points.map((point, iPoint) => [iPoint > 0 ? 'L' : 'M', point[0], ' ', point[1]].join('')).join(' '), 'Z'].join('');\n  }\n\n  rotatePoint(point, angle, origin) {\n    const radians = angle * Math.PI / 180;\n    const x = point[0] - origin[0];\n    const y = point[1] - origin[1];\n    const x1 = x * Math.cos(radians) - y * Math.sin(radians) + origin[0];\n    const y1 = x * Math.sin(radians) + y * Math.cos(radians) + origin[1];\n    return [x1, y1];\n  }\n\n  rotatePoints(points, angle, origin) {\n    const _self = this;\n\n    return points.map(point => _self.rotatePoint(point, angle, origin));\n  }\n\n  restrictToRange(val, min, max) {\n    if (val < min) return min;\n    if (val > max) return max;\n    return val;\n  }\n\n  mapLeafPoint(point, scale) {\n    return isNaN(point) ? point : point * scale;\n  }\n\n  render() {\n    const _self = this; // Local variables used for rendering.\n\n\n    const diameter = 400;\n    const radius = diameter / 2;\n    const ticksOuterRadius = diameter / 30;\n    const ticksInnerRadius = diameter / 8;\n    const tickDegrees = 300;\n    const rangeValue = this.props.maxValue - this.props.minValue; // Determine the maximum and minimum values to display.\n\n    let actualMinValue;\n    let actualMaxValue;\n\n    if (this.props.away) {\n      actualMinValue = this.props.ambientTemperature;\n      actualMaxValue = actualMinValue;\n    } else {\n      actualMinValue = Math.min(this.props.ambientTemperature, this.props.targetTemperature);\n      actualMaxValue = Math.max(this.props.ambientTemperature, this.props.targetTemperature);\n    }\n\n    const min = this.restrictToRange(Math.round((actualMinValue - this.props.minValue) / rangeValue * this.props.numTicks), 0, this.props.numTicks - 1);\n    const max = this.restrictToRange(Math.round((actualMaxValue - this.props.minValue) / rangeValue * this.props.numTicks), 0, this.props.numTicks - 1); // Renders the degree ticks around the outside of the thermostat.\n\n    const tickPoints = [[radius - 1, ticksOuterRadius], [radius + 1, ticksOuterRadius], [radius + 1, ticksInnerRadius], [radius - 1, ticksInnerRadius]];\n    const tickPointsLarge = [[radius - 1.5, ticksOuterRadius], [radius + 1.5, ticksOuterRadius], [radius + 1.5, ticksInnerRadius + 20], [radius - 1.5, ticksInnerRadius + 20]];\n    const theta = tickDegrees / this.props.numTicks;\n    const offsetDegrees = 180 - (360 - tickDegrees) / 2;\n    const tickArray = [];\n\n    for (let iTick = 0; iTick < this.props.numTicks; iTick++) {\n      const isLarge = iTick === min || iTick === max;\n      const isActive = iTick >= min && iTick <= max;\n      const tickElement = React.createElement('path', {\n        key: ['tick-', iTick].join(''),\n        d: this.pointsToPath(this.rotatePoints(isLarge ? tickPointsLarge : tickPoints, iTick * theta - offsetDegrees, [radius, radius])),\n        style: {\n          fill: isActive ? 'rgba(255, 255, 255, 0.8)' : 'rgba(255, 255, 255, 0.3)'\n        }\n      });\n      tickArray.push(tickElement);\n    } // Determines the positioning of the leaf, should it be displayed.\n\n\n    const leafScale = radius / 5 / 100;\n    const leafDef = ['M', 3, 84, 'c', 24, 17, 51, 18, 73, -6, 'C', 100, 52, 100, 22, 100, 4, 'c', -13, 15, -37, 9, -70, 19, 'C', 4, 32, 0, 63, 0, 76, 'c', 6, -7, 18, -17, 33, -23, 24, -9, 34, -9, 48, -20, -9, 10, -20, 16, -43, 24, 'C', 22, 63, 8, 78, 3, 84, 'z'].map(point => _self.mapLeafPoint(point, leafScale)).join(' ');\n    const translate = [radius - leafScale * 100 * 0.5, radius * 1.5]; // Determines whether the ambient temperature label will be displayed\n    // to the left or right of the tick range.\n\n    const lblAmbientPosition = [radius, ticksOuterRadius - (ticksOuterRadius - ticksInnerRadius) / 2];\n    const peggedValue = this.restrictToRange(this.props.ambientTemperature, this.props.minValue, this.props.maxValue);\n    let degs = tickDegrees * (peggedValue - this.props.minValue) / rangeValue - offsetDegrees;\n\n    if (peggedValue > this.props.targetTemperature) {\n      degs += 8;\n    } else {\n      degs -= 8;\n    }\n\n    const ambientPosition = this.rotatePoint(lblAmbientPosition, degs, [radius, radius]); // The styles change based on state.\n\n    const styles = this.getStyles(); // Piece it all together to form the thermostat display.\n\n    return React.createElement('svg', {\n      width: this.props.width,\n      height: this.props.height,\n      style: styles.dial,\n      viewBox: ['0 0 ', diameter, ' ', diameter].join('')\n    }, React.createElement('circle', {\n      cx: radius,\n      cy: radius,\n      r: radius,\n      style: styles.circle\n    }), React.createElement('g', null, tickArray), React.createElement('text', {\n      x: radius,\n      y: radius,\n      style: styles.target\n    }, Math.round(this.props.targetTemperature)), React.createElement('text', {\n      x: ambientPosition[0],\n      y: ambientPosition[1],\n      style: styles.ambient\n    }, Math.round(this.props.ambientTemperature)), React.createElement('text', {\n      x: radius,\n      y: radius,\n      style: styles.away\n    }, 'AWAY'), React.createElement('path', {\n      d: leafDef,\n      style: styles.leaf,\n      transform: ['translate(', translate[0], ',', translate[1], ')'].join('')\n    }));\n  }\n\n}\n\nThermostat.propTypes = {\n  /* Height of the thermostat (ex: 50% or 400px) */\n  height: React.PropTypes.string,\n\n  /* Width of the thermostat (ex: 50% or 400px) */\n  width: React.PropTypes.string,\n\n  /* Total number of ticks that will be rendered on the thermostat wheel */\n  numTicks: React.PropTypes.number,\n\n  /* Lowest temperature able to be displayed on the thermostat */\n  minValue: React.PropTypes.number,\n\n  /* Highest temperature able to be displayed on the thermostat */\n  maxValue: React.PropTypes.number,\n\n  /* Indicates whether or not the thermostat is in \"away mode\" */\n  away: React.PropTypes.bool,\n\n  /* Indicates whether or not the thermostat is in \"energy savings mode\" */\n  leaf: React.PropTypes.bool,\n\n  /* Actual temperature detected by the thermostat */\n  ambientTemperature: React.PropTypes.number,\n\n  /* Desired temperature that the thermostat attempts to reach */\n  targetTemperature: React.PropTypes.number,\n\n  /* Current state of operations within the thermostat */\n  hvacMode: React.PropTypes.oneOf(['off', 'heating', 'cooling'])\n};\nThermostat.defaultProps = {\n  height: '100%',\n  width: '100%',\n  numTicks: 100,\n  minValue: 50,\n  maxValue: 85,\n  away: false,\n  leaf: false,\n  ambientTemperature: 74,\n  targetTemperature: 68,\n  hvacMode: 'off'\n};\nmodule.exports = Thermostat;","map":null,"metadata":{},"sourceType":"script"}