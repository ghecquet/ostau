{"ast":null,"code":"import PahoMQTT from 'paho-mqtt';\nimport MQTTPattern from 'mqtt-pattern'; // import { addDevice, removeDevice, onData } from './actions';\n\nconst reduxMqttMiddleware = config => ({\n  dispatch\n}) => {\n  const client = new PahoMQTT.Client(config.host, config.port, config.clientId || \"\");\n  const statusPattern = 'stat/+id/+cmd';\n  const sensorPattern = 'tele/+id/SENSOR';\n  client.connect({\n    onSuccess: () => {\n      client.subscribe(MQTTPattern.clean(statusPattern));\n      client.subscribe(MQTTPattern.clean(sensorPattern));\n    }\n  });\n\n  client.onMessageArrived = message => {\n    MQTTPattern.exec(statusPattern, message.topic);\n    console.log(message);\n  }; //   client.on('message', ((topic, message) => {\n  //     const msgObj = JSON.parse(message);\n  //     if (topic === 'unregister') {\n  //       client.unsubscribe(msgObj.deviceId);\n  //       dispatch(removeDevice(msgObj));\n  //     } else if (topic === 'registrations') {\n  //       client.subscribe(msgObj.deviceId);\n  //       dispatch(addDevice(msgObj));\n  //     } else {\n  //       console.log('message:', msgObj);\n  //       dispatch(onData(msgObj));\n  //     }\n  //   }));\n\n\n  return next => action => {\n    console.log('nextaction', action);\n    next(action);\n  };\n};\n\nexport default reduxMqttMiddleware;","map":{"version":3,"sources":["/Users/ghecquet/work/src/github.com/ghecquet/ostau/src/tasmota/index.js"],"names":["PahoMQTT","MQTTPattern","reduxMqttMiddleware","config","dispatch","client","Client","host","port","clientId","statusPattern","sensorPattern","connect","onSuccess","subscribe","clean","onMessageArrived","message","exec","topic","console","log","next","action"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,WAAP,MAAwB,cAAxB,C,CAEA;;AAEA,MAAMC,mBAAmB,GAAGC,MAAM,IAAI,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACpD,QAAMC,MAAM,GAAG,IAAIL,QAAQ,CAACM,MAAb,CAAoBH,MAAM,CAACI,IAA3B,EAAiCJ,MAAM,CAACK,IAAxC,EAA8CL,MAAM,CAACM,QAAP,IAAmB,EAAjE,CAAf;AAEA,QAAMC,aAAa,GAAG,eAAtB;AACA,QAAMC,aAAa,GAAG,iBAAtB;AAEAN,EAAAA,MAAM,CAACO,OAAP,CAAe;AAACC,IAAAA,SAAS,EAAE,MAAM;AAC7BR,MAAAA,MAAM,CAACS,SAAP,CAAiBb,WAAW,CAACc,KAAZ,CAAkBL,aAAlB,CAAjB;AACAL,MAAAA,MAAM,CAACS,SAAP,CAAiBb,WAAW,CAACc,KAAZ,CAAkBJ,aAAlB,CAAjB;AACH;AAHc,GAAf;;AAKAN,EAAAA,MAAM,CAACW,gBAAP,GAA4BC,OAAD,IAAa;AACpChB,IAAAA,WAAW,CAACiB,IAAZ,CAAiBR,aAAjB,EAAgCO,OAAO,CAACE,KAAxC;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AACH,GAHD,CAXoD,CAgBxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEI,SAAOK,IAAI,IAAKC,MAAD,IAAY;AACvBH,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BE,MAA1B;AACAD,IAAAA,IAAI,CAACC,MAAD,CAAJ;AACH,GAHD;AAIH,CAlCD;;AAoCA,eAAerB,mBAAf","sourcesContent":["import PahoMQTT from 'paho-mqtt'\nimport MQTTPattern from 'mqtt-pattern'\n\n// import { addDevice, removeDevice, onData } from './actions';\n\nconst reduxMqttMiddleware = config => ({ dispatch }) => {\n    const client = new PahoMQTT.Client(config.host, config.port, config.clientId ||Â \"\");\n\n    const statusPattern = 'stat/+id/+cmd'\n    const sensorPattern = 'tele/+id/SENSOR'\n\n    client.connect({onSuccess: () => {\n        client.subscribe(MQTTPattern.clean(statusPattern));\n        client.subscribe(MQTTPattern.clean(sensorPattern));\n    }})\n\n    client.onMessageArrived = ((message) => {\n        MQTTPattern.exec(statusPattern, message.topic)\n        console.log(message)\n    })\n\n//   client.on('message', ((topic, message) => {\n//     const msgObj = JSON.parse(message);\n//     if (topic === 'unregister') {\n//       client.unsubscribe(msgObj.deviceId);\n//       dispatch(removeDevice(msgObj));\n//     } else if (topic === 'registrations') {\n//       client.subscribe(msgObj.deviceId);\n//       dispatch(addDevice(msgObj));\n//     } else {\n//       console.log('message:', msgObj);\n//       dispatch(onData(msgObj));\n//     }\n//   }));\n\n    return next => (action) => {\n        console.log('nextaction', action);\n        next(action);\n    };\n};\n\nexport default reduxMqttMiddleware;"]},"metadata":{},"sourceType":"module"}