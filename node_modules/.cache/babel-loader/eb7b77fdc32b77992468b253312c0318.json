{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport mqtt from 'redux-mqtt';\nimport reducer from './reducers/root';\nimport PahoMQTT from 'paho-mqtt';\nconst client = new PahoMQTT.Client(\"localhost\", 9001, \"\");\nclient.onMessageArrived = onMessageArrived;\nclient.connect({\n  onSuccess: onConnect\n}); // called when a message arrives\n\nfunction onMessageArrived(message) {\n  console.log(\"onMessageArrived:\" + message.payloadString);\n} // called when the client connects\n\n\nfunction onConnect() {\n  // Once a connection has been made, make a subscription and send a message.\n  console.log(\"onConnect\");\n  client.subscribe(\"#\");\n  const message = new PahoMQTT.Message(\"Hello\");\n  message.destinationName = \"World\";\n  client.send(message);\n}\n\nexport default function configureStore(initialState = {}) {\n  return createStore(reducer, initialState, composeWithDevTools(applyMiddleware(thunk, mqtt(client))));\n}","map":{"version":3,"sources":["/Users/ghecquet/go/src/github.com/ghecquet/ostau/src/store.js"],"names":["createStore","applyMiddleware","composeWithDevTools","thunk","mqtt","reducer","PahoMQTT","client","Client","onMessageArrived","connect","onSuccess","onConnect","message","console","log","payloadString","subscribe","Message","destinationName","send","configureStore","initialState"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEA,MAAMC,MAAM,GAAG,IAAID,QAAQ,CAACE,MAAb,CAAoB,WAApB,EAAiC,IAAjC,EAAuC,EAAvC,CAAf;AAEAD,MAAM,CAACE,gBAAP,GAA0BA,gBAA1B;AAEAF,MAAM,CAACG,OAAP,CAAe;AAACC,EAAAA,SAAS,EAACC;AAAX,CAAf,E,CAEA;;AACA,SAASH,gBAAT,CAA0BI,OAA1B,EAAmC;AAC/BC,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAoBF,OAAO,CAACG,aAAxC;AACD,C,CAEH;;;AACA,SAASJ,SAAT,GAAqB;AACjB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAR,EAAAA,MAAM,CAACU,SAAP,CAAiB,GAAjB;AACA,QAAMJ,OAAO,GAAG,IAAIP,QAAQ,CAACY,OAAb,CAAqB,OAArB,CAAhB;AACAL,EAAAA,OAAO,CAACM,eAAR,GAA0B,OAA1B;AACAZ,EAAAA,MAAM,CAACa,IAAP,CAAYP,OAAZ;AACD;;AAEH,eAAe,SAASQ,cAAT,CAAwBC,YAAY,GAAC,EAArC,EAAyC;AACpD,SAAOtB,WAAW,CACdK,OADc,EAEdiB,YAFc,EAGdpB,mBAAmB,CAACD,eAAe,CAACE,KAAD,EAAQC,IAAI,CAACG,MAAD,CAAZ,CAAhB,CAHL,CAAlB;AAKH","sourcesContent":["import { createStore, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk'\nimport mqtt from 'redux-mqtt'\nimport reducer from './reducers/root'\nimport PahoMQTT from 'paho-mqtt'\n\nconst client = new PahoMQTT.Client(\"localhost\", 9001, \"\");\n\nclient.onMessageArrived = onMessageArrived\n\nclient.connect({onSuccess:onConnect});\n\n// called when a message arrives\nfunction onMessageArrived(message) {\n    console.log(\"onMessageArrived:\"+message.payloadString);\n  }\n\n// called when the client connects\nfunction onConnect() {\n    // Once a connection has been made, make a subscription and send a message.\n    console.log(\"onConnect\");\n    client.subscribe(\"#\");\n    const message = new PahoMQTT.Message(\"Hello\");\n    message.destinationName = \"World\";\n    client.send(message);\n  }\n\nexport default function configureStore(initialState={}) {\n    return createStore(\n        reducer,\n        initialState,\n        composeWithDevTools(applyMiddleware(thunk, mqtt(client))),\n    );\n}"]},"metadata":{},"sourceType":"module"}